package algorithms;

import hash.Hashes;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import multiClientsFrames.SharedData;
import records.BlockRecord;

public class FileCreater {

    public static void createFile(byte[] bytes, File file,
            HashMap<Integer, byte[]> clientblocksData,
            HashMap<Integer, BlockRecord> blocksRecords, int lastBlockSize) {
        //System.out.println("createFile : " + file.getPath());
        //System.out.println("ClientblocksData :");
        // fill clientblocksData in blocksRecords
        for (int key : clientblocksData.keySet()) {
            //System.out.println(key + " : " + Arrays.toString(clientblocksData.get(key)));
            for (int record : blocksRecords.keySet()) {
                if (key == record) {
                    blocksRecords.get(record).setData(clientblocksData.get(key));
                }
            }
        }
        //System.out.println(blocksRecords);
        int newFileLength = (blocksRecords.size() - 1) * Hashes.BlockSize + lastBlockSize;
        if (lastBlockSize == 0) {
            newFileLength += Hashes.BlockSize;
        }
//        System.out.println("newFileData length : " + newFileLength);
        SharedData.textareaBocks.setText("Receive " + file.getName() + " length : " + newFileLength
                + "\n" + SharedData.textareaBocks.getText());
        byte[] newFileData = new byte[newFileLength];
        int index = 0;
        //System.out.println("Old file Data :" + Arrays.toString(bytes));
        for (int blockIndex : blocksRecords.keySet()) {
            BlockRecord br = blocksRecords.get(blockIndex);
            if (br.isFound()) {
//                System.out.print("blockIndex :" + blockIndex + " get from local Disk -");
//                System.out.println("from index : " + br.getOldIndex() + " with size : " + br.getSize());
                SharedData.textareaBocks.setText("block " + blockIndex + " get from local Disk -" + "from index : "
                        + br.getOldIndex() + " with size : " + br.getSize()
                        + "\n" + SharedData.textareaBocks.getText());
                for (int i = br.getOldIndex(); i < br.getOldIndex() + br.getSize(); i++) {
                    newFileData[index++] = bytes[i];
                }
            } else {
//                System.out.println("blockIndex :" + blockIndex + "  get from client");
                SharedData.textareaBocks.setText("block " + blockIndex + "  get from client"
                        + "\n" + SharedData.textareaBocks.getText());
                for (int i = 0; i < br.getData().length; i++) {
                    newFileData[index++] = br.getData()[i];
                }
            }
        }
        OutputStream out;
        try {
            out = new FileOutputStream("Cloud\\Server\\" + file.getName());
            out.write(newFileData);
            out.flush();
            out.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
}
