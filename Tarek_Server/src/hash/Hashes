package hash;

import java.io.File;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import javax.xml.bind.DatatypeConverter;

public class Hashes {

    public static final String HashMD5Algorithm = "MD5";
    public static final String HashSHA_512Algorithm = "SHA-512";
    public static final String HashAlgorithm = HashMD5Algorithm;
    public static final int BlockSize = 500 * 1024;  // byte

    public static String hardSignatureForFile(String fileName) {
        byte[] array = readFileData(fileName);
        try {
            return DatatypeConverter.printHexBinary(
                    MessageDigest.getInstance(HashAlgorithm).digest(array));
        } catch (NoSuchAlgorithmException ex) {
            //ex.printStackTrace();
            System.err.println("NoSuch Algorithm Exception");
        }
        return "";
    }

    public static String hardSignatureForFile(byte[] array) {
        try {
            return DatatypeConverter.printHexBinary(
                    MessageDigest.getInstance(HashAlgorithm).digest(array));
        } catch (NoSuchAlgorithmException ex) {
            //ex.printStackTrace();
            System.err.println("NoSuch Algorithm Exception");
        }
        return "";
    }

    public static String hardSignatureForBlock(byte[] array, int start, int end) {
        byte[] block = new byte[end - start + 1];
        for (int i = start, j = 0; i <= end; i++, j++) {
            block[j] = array[i];
        }
        try {
            return DatatypeConverter.printHexBinary(
                    MessageDigest.getInstance(HashAlgorithm).digest(block));
        } catch (NoSuchAlgorithmException ex) {
            //ex.printStackTrace();
            System.err.println("NoSuch Algorithm Exception");
            return "";
        }
    }

    public static String softSignatureForBlock(byte[] array, int start, int end) {
//        byte[] block = new byte[end - start + 1];
//        for (int i = start, j = 0; i <= end; i++, j++) {
//            block[j] = array[i];
//        }
//        byte[] hash = new byte[6];
//        hash[0] = block[0];
//        hash[1] = block[1];
//        hash[2] = block[2];
//        hash[3] = block[block.length - 3];
//        hash[4] = block[block.length - 2];
//        hash[5] = block[block.length - 1];
//        System.out.println("hash : " + DatatypeConverter.printHexBinary(hash));

        byte[] hash2 = new byte[6];
        hash2[0] = array[start];
        hash2[1] = array[start + 1];
        hash2[2] = array[start + 2];
        hash2[3] = array[end - 2];
        hash2[4] = array[end - 1];
        hash2[5] = array[end];
//        byte[] hash2 = new byte[2];
//        hash2[0] = array[start];
//        hash2[1] = array[end];
        //System.out.println("hash2 : " + DatatypeConverter.printHexBinary(hash2));
        return DatatypeConverter.printHexBinary(hash2);

    }

    public static String indexForsoftSignatureForBlock(String softhash) {
        String index = "";
        index += softhash.charAt(0);
        index += softhash.charAt(1);
        index += softhash.charAt(2);
        index += softhash.charAt(softhash.length() - 3);
        index += softhash.charAt(softhash.length() - 2);
        index += softhash.charAt(softhash.length() - 1);
        return index;
    }

    public static String HashesToString(HashMap<Integer, String> blocksSoftHashes,
            HashMap<Integer, String> blocksHardHashes) {
        String hashs = "";
        hashs += "Blocks Soft Hashes :\n";
        for (int key : blocksSoftHashes.keySet()) {
            hashs += key + " : " + blocksSoftHashes.get(key) + "\n";
        }
        hashs += "Blocks Hard Hashes :\n";
        for (int key : blocksHardHashes.keySet()) {
            hashs += key + " : " + blocksHardHashes.get(key) + "\n";
        }
        return hashs;
    }

    public static byte[] readFileData(String filename) {
        File file1 = new File(filename);
        byte[] fileArray = null;
        try {
            fileArray = Files.readAllBytes(file1.toPath());
        } catch (Exception ex) {
            System.err.println("cannot access the file : " + filename);
        }
        return fileArray;
    }
}
