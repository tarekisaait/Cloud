package records;

import hash.Hashes;
import java.io.IOException;
import java.io.Serializable;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import multiClientsFrames.SharedData;

public class FileRecord implements Serializable {

    private static final long serialVersionUID = 6529685098267757690L;
    private String name;
    private String newName;
    private String path;
    private String time;
    private EventType type;
    private String hash;
    private String algorithm;

    public static FileRecord createFileRecord(String rootPath, String name, String type, String newName) {
        FileRecord fc = new FileRecord();
        String filePath = rootPath + "\\" + name;
        try {
            if (type.equals("renamed")) {
                filePath = rootPath + "\\" + newName;
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss");
                String time = dateFormat.format(Files.getLastModifiedTime(Paths.get(filePath)).toMillis());
                fc.setName(name);
                fc.setNewName(newName);
                fc.setPath(rootPath);
                fc.setTime(time);
                fc.setType(EventType.rename);
                fc.setHash(Hashes.hardSignatureForFile(filePath));
            } else if (type.equals("deleted")) {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss");
                String time = dateFormat.format(new Date());
                fc.setName(name);
                fc.setNewName(newName);
                fc.setPath(rootPath);
                fc.setTime(time);
                fc.setType(EventType.delete);
                fc.setHash(null);
            } else if (type.equals("created")) {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss");
                String time = dateFormat.format(Files.getLastModifiedTime(Paths.get(filePath)).toMillis());
                fc.setName(name);
                fc.setNewName(newName);
                fc.setPath(rootPath);
                fc.setTime(time);
                fc.setType(EventType.create);
                fc.setHash(Hashes.hardSignatureForFile(filePath));
            } else if (type.equals("modified")) {
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - hh:mm:ss");
                String time = dateFormat.format(Files.getLastModifiedTime(Paths.get(filePath)).toMillis());
                fc.setName(name);
                fc.setNewName(newName);
                fc.setPath(rootPath);
                fc.setTime(time);
                fc.setType(EventType.modify);
                fc.setHash(Hashes.hardSignatureForFile(filePath));
                fc.setAlgorithm((String) SharedData.selectedAlgorithm.getSelectedItem());
            }
        } catch (IOException ex) {
            //ex.printStackTrace();
            System.err.println("createFileRecord error");
        }
        return fc;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNewName() {
        return newName;
    }

    public void setNewName(String newName) {
        this.newName = newName;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public EventType getType() {
        return type;
    }

    public void setType(EventType type) {
        this.type = type;
    }

    public String getHash() {
        return hash;
    }

    public void setHash(String hash) {
        this.hash = hash;
    }

    public String getAlgorithm() {
        return algorithm;
    }

    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    @Override
    public String toString() {
        return "FileRecord{\n" + " name=" + name + ",\n newName=" + newName + ",\n path=" + path
                + ",\n time=" + time + ",\n eventType="
                + type + ",\n hash=" + hash
                + ",\n algorithm=" + algorithm + "\n}";
    }

    public String toMsg() {
        if (type == EventType.rename) {
            return type + " : " + name + "->" + newName;
        } else {
            return type + " : " + name;
        }
    }

    @Override
    public int hashCode() {
        int hash = 5;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FileRecord other = (FileRecord) obj;
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        if (!Objects.equals(this.path, other.path)) {
            return false;
        }
        if (!Objects.equals(this.hash, other.hash)) {
            return false;
        }
//        if (this.type != other.type) {
//            return false;
//        }
        return true;
    }

}
