package multiClientsFrames;

import hash.Hashes;
import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import javax.swing.JButton;
import records.BlockRecord;
import records.EventType;
import records.FileRecord;
import windowsListener.WatchFolder;

public class ClientReceiveThread extends Thread {

    JButton connectBtn;
    WatchFolder watchFolder;
    String id;
    Socket socket = null;
    ObjectInputStream in = null;

    public ClientReceiveThread(JButton connectBtn, WatchFolder watchFolder, String id, Socket socket) {
        this.connectBtn = connectBtn;
        this.watchFolder = watchFolder;
        this.id = id;
        this.socket = socket;
        try {
            in = new ObjectInputStream(socket.getInputStream());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            while (true) {
                FileRecord fc = (FileRecord) in.readObject();
                //System.out.println(msg);
                SharedData.textareaEvents.setText(fc.toMsg() + "\n" + SharedData.textareaEvents.getText());
                SharedData.textareaRecords.setText("Cloud " + fc + "\n" + SharedData.textareaRecords.getText());
                doEvent(fc);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            SharedData.textareaEvents.setText("Check your Internet ^_^ Or Server Offline" + "\n" + SharedData.textareaEvents.getText());
            watchFolder.stop();
            connectBtn.setEnabled(true);
        }
    }

    public void doEvent(FileRecord fc) throws Exception {
        if (fc.getType() == EventType.rename) {
            File f = new File("Cloud\\" + id + "\\" + fc.getName());
            this.watchFolder.stopWatch();
            if (f.renameTo(new File("Cloud\\" + id + "\\" + fc.getNewName()))) {
                //System.out.println(names[0] + " was renamed To " + names[1]);
            }
            this.watchFolder.startWatch();
        } else if (fc.getType() == EventType.delete) {
            //System.out.println("data[1] = " + data[1]);
            File f = new File("Cloud\\" + id + "\\" + fc.getName());
            this.watchFolder.stopWatch();
            try {
                Files.delete(Paths.get("Cloud\\" + id + "\\" + fc.getName()));
            } catch (Exception e) {
                //e.printStackTrace();
                //System.err.println("Exception Files.delete : file not found");
            }
            this.watchFolder.startWatch();
        } else if (fc.getType() == EventType.create) {
            //System.out.println("data[1] = " + data[1]);
            File f = new File("Cloud\\" + id + "\\" + fc.getName());
            receiveCreateFile(f);
        } else if (fc.getType() == EventType.modify) {
            //System.out.println("data[1] = " + data[1]);
            File f = new File("Cloud\\" + id + "\\" + fc.getName());
            receiveModifyFile(f, fc);
        } else if (fc.getType() == EventType.wait) {
            SharedData.waitingProgressBar.setVisible(true);
        } else if (fc.getType() == EventType.stopWait) {
            SharedData.waitingProgressBar.setVisible(false);
        } else if (fc.getType() == EventType.sendBlocks) {
            SharedData.locker = false;
            String filePath = fc.getPath();
            System.out.println("filePath from server : " + filePath);
            HashMap<Integer, Integer> blocksNotFound = (HashMap<Integer, Integer>) in.readObject();
            System.out.println("blocksNotFound from server : " + blocksNotFound);
            HashMap<Integer, byte[]> clientblocksData = getBlocksNotFoundData("Cloud\\" + id + "\\" + fc.getName(), blocksNotFound);
            ClientSendThread.out.writeObject(clientblocksData);
            ClientSendThread.out.flush();
            SharedData.locker = true;
        } else if (fc.getType() == EventType.receiveBlocks) {
            String fileName = fc.getName();
            HashMap<Integer, BlockRecord> serverblocksRecords = (HashMap<Integer, BlockRecord>) in.readObject();
            int lastBlockSize = (int) in.readObject();
            createFileFromBlocks(fileName, serverblocksRecords, lastBlockSize);
        }
    }

    public void receiveCreateFile(File file) throws FileNotFoundException, Exception {
        byte[] bytes;
        try {
            bytes = (byte[]) in.readObject();
            this.watchFolder.stopWatch();
            OutputStream out = new FileOutputStream("Cloud\\" + id + "\\" + file.getName());
            out.write(bytes);
            out.flush();
            out.close();
            this.watchFolder.startWatch();
            //System.out.println(file.getName() + " received. ");
        } catch (Exception ex) {
            System.out.println("file receive error");
            //doEvent("deleted:#" + file.getName());
        }
    }

    public void receiveModifyFile(File file, FileRecord fc) throws FileNotFoundException, Exception {
        OutputStream out = new FileOutputStream("Cloud\\" + id + "\\" + file.getName());
        byte[] bytes;
        try {
            if (fc.getAlgorithm().equals(SharedData.algorithm_Full)) {
                bytes = (byte[]) in.readObject();
                this.watchFolder.stopWatch();
                out.write(bytes);
                out.flush();
                out.close();
                this.watchFolder.startWatch();
            }
            //System.out.println(file.getName() + " received. ");
        } catch (Exception ex) {
            System.out.println("file receive error");
            //doEvent("deleted:#" + file.getName());
        }
    }

    public HashMap<Integer, byte[]> getBlocksNotFoundData(String filePath,
            HashMap<Integer, Integer> blocksNotFound) {
        byte[] filedata = Hashes.readFileData(filePath);
        System.out.println("filedata.length = " + filedata.length);
        HashMap<Integer, byte[]> clientblocksData = new HashMap<>();
        for (int index : blocksNotFound.keySet()) {  // key=index , value=blockSize
            int blockSize = blocksNotFound.get(index);
            byte[] blockData = new byte[blockSize];
            for (int i = 0, j = index * Hashes.BlockSize; i < blockSize; i++, j++) {
                blockData[i] = filedata[j];
            }
            clientblocksData.put(index, blockData);
        }
        return clientblocksData;
    }

    public void createFileFromBlocks(String fileName,
            HashMap<Integer, BlockRecord> serverblocksRecords,
            int lastBlockSize) {
        try {
            File file = new File("Cloud\\" + id + "\\" + fileName);
            InputStream in = new FileInputStream(file);
            byte[] bytes = new byte[(int) file.length()];
            in.read(bytes);
            in.close();

            int newFileLength = (serverblocksRecords.size() - 1) * Hashes.BlockSize + lastBlockSize;
            if (lastBlockSize == 0) {
                newFileLength += Hashes.BlockSize;
            }
            //System.out.println("newFileData length : " + newFileLength);
            SharedData.textareaBocks.setText("Receive " + fileName + " length : " + newFileLength
                    + "\n" + SharedData.textareaBocks.getText());
            byte[] newFileData = new byte[newFileLength];
            int index = 0;
            //System.out.println("Old file Data :" + Arrays.toString(bytes));
            for (int blockIndex : serverblocksRecords.keySet()) {
                BlockRecord br = serverblocksRecords.get(blockIndex);
                if (br.isFound()) {
//                    System.out.print("block " + blockIndex + " get from local Disk -");
//                    System.out.println("from index : " + br.getOldIndex() + " with size : " + br.getSize());
                    SharedData.textareaBocks.setText("block " + blockIndex + " get from local Disk -" + "from index : "
                            + br.getOldIndex() + " with size : " + br.getSize()
                            + "\n" + SharedData.textareaBocks.getText());
                    for (int i = br.getOldIndex(); i < br.getOldIndex() + br.getSize(); i++) {
                        newFileData[index++] = bytes[i];
                    }
                } else {
                    //System.out.println("block " + blockIndex + "  get from server");
                    SharedData.textareaBocks.setText("block " + blockIndex + "  get from server"
                            + "\n" + SharedData.textareaBocks.getText());
                    for (int i = 0; i < br.getData().length; i++) {
                        newFileData[index++] = br.getData()[i];
                    }
                }
            }
            this.watchFolder.stopWatch();
            OutputStream out;
            try {
                out = new FileOutputStream("Cloud\\" + id + "\\" + fileName);
                out.write(newFileData);
                out.flush();
                out.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            this.watchFolder.startWatch();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }
}
