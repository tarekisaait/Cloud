package tester;

import hash.Hashes;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;

public class Test2_Hashes {

    public static void main(String[] args) throws Exception {
//        for (int i = 0; i <= 26; i++) {
//            System.out.print((char) (i + 97));
//        }
        //String filePath = "Cloud\\client1\\1mb.png";
        String filePath = "Cloud\\client1\\10mb.png";
        //String filePath = "Cloud\\client1\\10mb.zip";
        //String filePath = "Cloud\\client1\\22mb.zip";
        //String filePath = "Cloud\\client1\\50mb.zip";
        File file = new File(filePath);
        InputStream in = new FileInputStream(file);
        //System.out.println("File Hash : " + Hashes.hardSignatureForFile("Cloud\\client1\\a.txt"));
        byte[] bytes = new byte[(int) file.length()];
        in.read(bytes);
        in.close();
        int sizebyte = (int) file.length();
        int sizeKB = sizebyte / 1024;
        int sizeMB = sizeKB / 1024;
        System.out.println("file.length() = " + file.length() + "byte = " + sizeKB + "KB = " + sizeMB + "MB");

        int blockSize = 500 * 1024;  // 100kb=100*1024 - 1mb=1*1024*1024
        int blockSizebyte = blockSize;
        int blockSizeKB = blockSizebyte / 1024;
        int blockSizeMB = blockSizeKB / 1024;
        System.out.println("blockSize = " + blockSizebyte + "byte = " + blockSizeKB + "KB = " + blockSizeMB + "MB");
        int blockCount = (int) (file.length() / blockSizebyte);
        System.out.println("block Count = " + blockCount);
//        System.out.println(Hashes.hardSignatureForBlock(filePath, 0 * blockSize, 1 * blockSize - 1));
//        System.out.println(Hashes.hardSignatureForBlock(filePath, 1 * blockSize, 2 * blockSize - 1));
//        System.out.println(Hashes.hardSignatureForBlock(filePath, 2 * blockSize, 3 * blockSize - 1));
        int i;
//        for (i = 0; (i + 1) * blockSize - 1 < bytes.length; i++) {
//            System.out.println(i + " : " + Hashes.SignatureForBlock(bytes, i * blockSize, (i + 1) * blockSize - 1, 1));
//        }
//        if (i * blockSize < bytes.length) {
//            System.out.println("Last  block Size = " + (bytes.length - (i * blockSize)));
//            System.out.println(i + " : " + Hashes.SignatureForBlock(bytes, i * blockSize, bytes.length - 1, 1));
//        }
//        for (int i = 0; i < bytes.length; i++) {
//            System.out.println(i + " : " + (char) bytes[i]);
//        }
        //------------------------------------------------------------------------------------
//        long startTime = System.nanoTime();
//        for (i = 0; i < 100000; i++) {
//            if (1 == 1) {
//                //System.out.println("iter " + i);
//                int x = 3;
//                int y = 4;
//                int z = x + y;
//            }
//        }
//        long duration = (System.nanoTime() - startTime);
//        double timeSeconds = (double) duration / 1000000000;
//        System.out.println("duration : " + timeSeconds + " sec.");

        //----------------------------------------------------------------------
        // client send blocksSoftHashes , blocksHardHashes
        HashMap<Integer, String> clientblocksSoftHashes = new HashMap<>();
        HashMap<Integer, String> clientblocksHardHashes = new HashMap<>();

        for (i = 0; (i + 1) * blockSize - 1 < bytes.length; i++) {
            clientblocksSoftHashes.put(i, Hashes.softSignatureForBlock(bytes, i * blockSize, (i + 1) * blockSize - 1));
            clientblocksHardHashes.put(i, Hashes.hardSignatureForBlock(bytes, i * blockSize, (i + 1) * blockSize - 1));
        }
        int size = (bytes.length - (i * blockSize)) / 1024;
        if (i * blockSize < bytes.length) {
            System.out.println("Last block Size " + size + "KB");
            clientblocksSoftHashes.put(i, Hashes.softSignatureForBlock(bytes, i * blockSize, bytes.length - 1));
            clientblocksHardHashes.put(i, Hashes.hardSignatureForBlock(bytes, i * blockSize, bytes.length - 1));
        }
//        for (int key : blocksSoftHashes.keySet()) {
//            System.out.println("Block_" + key + " Soft Hash : " + blocksSoftHashes.get(key));
//            System.out.println("Block_" + key + " Hard Hash : " + blocksHardHashes.get(key));
//        }
//        System.out.println(blocksHardHashes.containsValue("22478C798A43AEB844CA379A69BD3E0E"));
        //Server ---------------------------------------------------------------

        long start = System.nanoTime();
        long startTime = System.nanoTime();
        HashMap<Integer, String> serverBlocksSoftHashes = new HashMap<>();
        for (i = 0; i < bytes.length - blockSize; i++) {
            serverBlocksSoftHashes.put(i, Hashes.softSignatureForBlock(bytes, i, i + blockSize - 1));
        }
        long duration = (System.nanoTime() - startTime);
        double timeSeconds = (double) duration / 1000000000;
        System.out.println("serverBlocksSoftHashes.size() = " + serverBlocksSoftHashes.size());
        System.out.println("duration of calculate serverBlocksSoftHashes On Byte offset  : " + timeSeconds + " seconds.");
//        for (int key : serverBlocksSoftHashes.keySet()) {
//            System.out.println("Block_" + key + " Soft Hash : " + serverBlocksSoftHashes.get(key));
//        }

        // search for blocks
        startTime = System.nanoTime();
        String softHash = "";
        String hardHash = "";
//        for (i = 0; i < blocksHardHashes.size(); i++) {
//            blocksHardHashes.put(i, "123");
//        }
        boolean found = false;
        String data = "";
        for (int clientkey : clientblocksSoftHashes.keySet()) {
            //System.out.println("Search for block : " + key);
            softHash = clientblocksSoftHashes.get(clientkey);
            found = false;
            for (int serverkey : serverBlocksSoftHashes.keySet()) {
                if (softHash.equals(serverBlocksSoftHashes.get(serverkey))) {
                    hardHash = Hashes.hardSignatureForBlock(bytes, serverkey, serverkey + blockSize - 1);
                    if (clientblocksHardHashes.get(clientkey).equals(hardHash)) {
                        found = true;
                        data += "block (" + clientkey + ") Found at index " + serverkey + "\n";
                        break;
                    }
                }
            }
            if (!found) {
                data += "block (" + clientkey + ") Not found\n";
            }
            //break;
        }
        duration = (System.nanoTime() - startTime);
        timeSeconds = (double) duration / 1000000000;
        System.out.println("duration of Search : " + timeSeconds + " seconds.");

        duration = (System.nanoTime() - start);
        timeSeconds = (double) duration / 1000000000;
        System.out.println("Total duration (Create, Search) : " + timeSeconds + " seconds.");

        System.out.println(data);
    }

}
